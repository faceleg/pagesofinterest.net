---
# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll site to Pages
on:
  push:
    branches: ["main"]  # Runs on pushes targeting the default branch
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  deployments: write
# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false
jobs:
  yamllint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: yaml-lint
        uses: ibiqlik/action-yamllint@v3
  markdownlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 21
      - run: npm ci
      - run: npm run markdownlint
  eslint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 21
      - run: npm ci
      - run: npm run eslint
  rubocop:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true  # runs 'bundle install' and caches installed gems automatically
          cache-version: 0  # Increment this number if you need to re-download cached gems
          ruby-version: 3.2
      - run: gem install rubocop
      - run: rubocop

  ### Ideally this would build, upload artifact then deploy
  # Build job
  build-and-deploy-to-cloudflare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # Install libs
      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libvips-tools
          version: 1.0
      # Setup languages
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true  # runs 'bundle install' and caches installed gems automatically
          cache-version: 0  # Increment this number if you need to re-download cached gems
          ruby-version: 3.2
      - uses: actions/setup-node@v4
        with:
          node-version: 21
          cache: "npm"
          cache-dependency-path: ./package-lock.json
      - run: npm ci
      - uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
      # Build pages
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
      - name: Publish to CloudFlare
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: faceleg
          directory: ./_site
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Purge https://www.pagesofinterest.net
        run: |
            curl "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
              --header "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN_PURGE_CACHE }}" \
              --header "Content-Type: application/json" \
              --data '{"files":[{"url":"https://pagesofinterest.net"}]}' | \
              tee >(jq -e 'if .errors | length == 0 then empty else error end')
